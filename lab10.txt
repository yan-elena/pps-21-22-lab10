%---- Part1 -----

%==== Ex 1.1 ====
% search (Elem , List )

search (X ,[ X| _ ]) .
search (X ,[ _| Xs ]) :- search (X , Xs ) .

%==== Ex 1.2 ====
% search2 (Elem , List )
% looks for two consecutive occurrences of Elem

search2 (X ,[X ,X|_ ]) .
search2 (X ,[ _| Xs ]) :- search2 (X , Xs ).

%==== Ex 1.3 ====
% search_two (Elem , List )
% looks for two occurrences of Elem with any element in between !

search_two (X, [X, _|T]) :- search (X, T) .
search_two (X, [_ | Xs]) :- search_two (X, Xs) .

%==== Ex 1.4 ====
% search_anytwo (Elem , List )
% looks for any Elem that occurs two times , anywhere

search_anytwo(X, [X|T]) :- search (X, T) .
search_anytwo (X, [_ | Xs]) :- search_anytwo (X, Xs) .


%---- Part2 ----

%==== Ex 2.1 ====
% size (List , Size )
% Size will contain the number of elements in List

size ([] ,0) .
size ([ _ | Xs ], N) :- size ( Xs , N2 ) , N is N2 + 1.

%==== Ex 2.2 ====
% size (List , Size )
% Size will contain the number of elements in List ,
written using notation zero , s( zero ), s(s( zero ))..

size_2 ([], zero) .
size_2 ([_ | Xs], s(N)) :- size_2 (Xs, N) .

%==== Ex 2.3 ====
% sum(List , Sum )

sum ([], 0) .
sum ([ H | Xs ], S) :- sum ( Xs , S2) , S is S2 + H  .


%==== Ex 2.4 ====
% average (List , Average )
% it uses average (List ,Count ,Sum , Average )

average ( List ,A) :- average ( List ,0 ,0 , A).
average ([] ,C ,S ,A ) :- A is S/C .
average ([ X| Xs ],C ,S ,A) :- 
	C2 is C +1 , 
	S2 is S+X , 
	average (Xs , C2 ,S2 ,A).

%==== Ex 2.5 ====
% max(List , Max )
% Max is the biggest element in List
% Suppose the list has at least one element

max ([H|T], M) :- max (T, M, H) .
max ([], M, M) .
max ([H|T], M, TM) :- H>=TM, max (T, M, H) .
max ([H|T], M, TM) :- H<TM, max (T, M, TM) .

%==== Ex 2.6 ====
% max(List ,Max , Min )
% Max is the biggest element in List
% Min is the smallest element in List
% Suppose the list has at least one element

maxmin([H|T], MX, MN) :- maxmin2([H|T], MX, MN, H, H) .
maxmin2([], MX, MN, MX, MN) .
maxmin2([H|T], MX, MN, TMX, TMN) :- H=<TMX, H>TMN , maxmin2(T, MX, MN, TMX, TMN) .
maxmin2([H|T], MX, MN, TMX, TMN) :- H>=TMX, maxmin2(T, MX, MN, H, TMN) .
maxmin2([H|T], MX, MN, TMX, TMN) :- H<TMN, maxmin2(T, MX, MN, TMX, H) .

